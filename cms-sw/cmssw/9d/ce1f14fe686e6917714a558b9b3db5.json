{"additions": 381, "auther_ref": "PFProducer_cleanup_2", "auther_sha": "c6bf7f499b4d3e2eda839768aba1a0f28328b581", "author": "guitargeek", "body": "#### PR description:\r\n\r\nThe particle flow code uses the k-d-tree data structure, which is also used in __RecoPixelVertexing/PixelTriplets__. It seems the pixel version was copy-pasted from PFProducer initially, but then significantly improved by @makortel in https://github.com/cms-sw/cmssw/pull/772. Nice work!\r\n\r\nI'm curious what would happen if we use this improved version in PFProducer, actually. If I understand https://github.com/cms-sw/cmssw/pull/772 correctly, there should be no change in physics output, but 40 % faster searches. Maybe we can test it once to see if this is really the case and if yes do an igprof to see if we also benefit from the speedup? The obvious benefit would be to avoid double implementation, even if no speedup.\r\n\r\nNote: to avoid rebase issues I made this commit on top of the already signed https://github.com/cms-sw/cmssw/pull/26519.\r\n\r\n#### PR validation:\r\n\r\nCMSSW compiles and matrix tests run.", "branch": "master", "changed_files": 34, "comments": 10, "commits": 7, "created_at": "1556196703", "deletions": 1144, "labels": ["code-checks-approved", "comparison-pending", "hold", "orp-pending", "pending-signatures", "reconstruction-pending", "tests-pending"], "milestone": "CMSSW_10_6_X", "number": 26534, "release-notes": [], "review_comments": 2, "state": "open", "title": "Bring performance improvement in KDTreeLinkerAlgo as in #772 to RecoParticleFlow", "updated_at": "1556199736", "user": "guitargeek"}