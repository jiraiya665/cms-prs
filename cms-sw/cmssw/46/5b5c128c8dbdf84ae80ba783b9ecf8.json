{"additions": 122, "auther_ref": "esConsumesDQM4", "auther_sha": "f8cdccc754080060f59bf48b1a1db8113fa28cab", "author": "wddgit", "body": "#### PR description:\r\n\r\nMigrate DTChamberEfficiency to call esConsumes for EventSetup data that it gets. Actually I just removed the direct EventSetup calls in DTChamberEfficiency. It didn't use DTGeometry data it was getting and the other two types are obtainable from the MuonProxyService which it was already using. The only difference being that MuonProxyService gets the data each event instead of each run. (Before DTChamberEfficiency was getting them each run AND each event, but only using them in the event).\r\n\r\nUpgraded the MuonServiceProxy helper class so that it supports both modes (with calls to esConsumes and without). More than 100 other modules seem to use MuonServiceProxy so this dual support is needed during the transition. To migrate to esConsumes support, the other modules only need to add the ConsumesCollector argument when constructing MuonServiceProxy. Eventually when all those modules are migrated, the old MuonProxyService constructor should be deleted.\r\n\r\nAlso added a new Framework header for Framework forward declarations that is less heavy than Frameworkfwd.h.\r\n\r\n#### PR validation:\r\n\r\nRelies on existing tests. No new functionality and existing results should not change.\r\n", "branch": "master", "changed_files": 5, "comments": 8, "commits": 1, "created_at": "1578692509", "deletions": 87, "labels": ["code-checks-approved", "comparison-available", "core-pending", "dqm-pending", "orp-pending", "pending-signatures", "reconstruction-pending", "tests-approved"], "milestone": "CMSSW_11_1_X", "number": 28730, "release-notes": [], "review_comments": 0, "state": "open", "title": "esConsumes migration DTChamberEfficiency", "updated_at": "1578706402", "user": "wddgit"}