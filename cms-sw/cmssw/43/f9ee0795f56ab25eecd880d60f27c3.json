{"additions": 3090, "auther_ref": "dqm-switch-stream", "auther_sha": "aeadec3eb54f2cbebcd7ccb0ffa033ca073af1f0", "author": "schneiml", "body": "#### PR description:\r\nThis PR cashes in on the work in #28622 and all the previous PRs, by changing the module type of `DQMEDAnalyzer` back to `edm::stream`. This should significantly reduce the number of modules blocking concurrent lumisections on production sequences.\r\n\r\nThis PR depends on #28622 *and includes it*, it should be merged once the other one is in. For now, this is to allow some validation of this change.\r\n\r\n`DQMEDAnalyzer` used to be `edm::stream` based from 2015 to 2018, so *basically* not much should break. However, over the last two years DQM has changed, and some modules grew dependencies on `edm::one` behaviour, while others where migrated from legacy `edm::EDAnalyzer` to `DQMEDAnalyzer` as this became possible. This PR includes a lot of changes to these modules to remove their usage of `beginJob`/`endJob` methods: While we could provide it (and call it e.g. from `beginStream`/`endStream`), it does not make much sense, and most of the modules don't do anything important there anyways. So, I rather banned and removed those methods.\r\n\r\nIn a few cases, there was non-trivial logic that I'd rather keep, those where migrated to `DQMOneEDAnalyzer` which still provides those methods. However, it still does not make much sense to do anything in `endJob` in a `DQMEDAnalyzer`, since by the time it is called, the DQM output is typically already written to file.\r\n\r\nA large number of `DQMOneEDAnalyzer`s remain, so we won't get concurrent LS immediately. These modules need to be either reviewed and rewritten in a concurrent-lumi save way (e.g. by using `LuminosityBlockCache`s), or removed from the production sequences.\r\n\r\nBack in 2018, we moved to `edm::one` to reduce memory usage. This change gets us the best of both worlds: concurrent processing while the memory usage stays within O(#concurrentLS), compared to the O(#streams) in 2015, thanks to the new `DQMStore` logic added in #28622.\r\n\r\n\r\n#### PR validation:\r\n\r\nNot much so far, and it is going to be hard. The PR/IB tests barely use multi-threaded execution, leave alone concurrent LS. The big risk are race conditions, which are notoriously hard to spot, even when the right code paths are executed. A clean, bit-by-bit comparison on a larger sample might be a good idea.\r\n", "branch": "master", "changed_files": 210, "comments": 24, "commits": 118, "created_at": "1580229162", "deletions": 5803, "labels": ["alca-pending", "code-checks-pending", "comparison-pending", "core-pending", "dqm-pending", "fastsim-pending", "generators-pending", "hlt-pending", "l1-pending", "operations-pending", "orp-pending", "pending-signatures", "reconstruction-pending", "tests-pending"], "milestone": "CMSSW_11_1_X", "number": 28813, "release-notes": [], "review_comments": 0, "state": "open", "title": "DQM: Switch to `edm::stream` for `DQMEDAnalyzer`", "updated_at": "1580473227", "user": "schneiml"}