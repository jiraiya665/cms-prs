{"additions": 566, "auther_ref": "dqm-dqmdumpsequence", "auther_sha": "e7855caf71bd22b97e68c771340db3073b6fe277", "author": "schneiml", "body": "#### PR description:\r\n\r\nThis PR introduces a new tool that instruments `cmsDriver/cmsRun` to find out which modules are effectively loaded for each sequence. It is not strictly limited to DQM sequences, but focused on this usage for now. The method used is rather complicated and fragile, but it gives accurate results, unlike other methods I tried.\r\n\r\nThe information gathered about all sequences mentioned in `runTheMatrix` is stored into a SQLite database that can then be browsed interactively using a simple web-based frontend, or queried automatically.\r\n\r\nThis PR includes a unit test that builds the database and then queries for DQM legacy modules, and fails if any are found (it currently finds but ignores legacy `EDProducer`s and `EDFilter`s). The test runs multi-threaded and still takes about 10-20min to complete; I am not sure if this is ok for a unit test.\r\n\r\nThe tool can also be used to display the contents of a single sequence (see `--help`).\r\n\r\nThe tool works by\r\n- Querying `runTheMatrix.py` for parameter combinations passed to `cmsDriver.py`.\r\n- Executing `cmsDriver.py` once for each parameter combination, along with some fake options that should not affect which modules run but let `cmsDriver.py` succeed.\r\n- Executing the resulting config files with `cmsRun` with the tracer service enabled. The jobs are configured for 0 events, so they finish rather quickly without actually reading any input, except for the HARVESTING jobs which tend to do things in `endJob` and eventually crash. This is fine though, the main purpose of actually running `cmsRun` is to get the list of loaded modules out of the tracer output.\r\n- Dumping the configuration using `edmConfigDump` and parsing the output to resolve the module labels from the tracer into class names, and collect the precise config fragment for each instance.\r\n- Running `edmPluginHelp` for each class to see what plugin type it is.\r\n\r\n`cmsDriver` and `edmPluginHelp` are pretty slow, things are done multi-threaded to finish in reasonable time. If anybody has suggestions on how to avoid this huge detour and still produce reliable results, input is appreciated.\r\n\r\nI may provide a an instance of the web interface hosted somewhere at some point, but for now, you need to run it yourself if you want to try it:\r\n\r\n```\r\nfirefox http://localhost:8000 &\r\nssh -L 8000:localhost:8000 lxplus\r\nmkdir -p /tmp/$USER\r\ncd /tmp/$USER\r\ncmsrel CMSSW_11_1_0_pre4\r\ncd CMSSW_11_1_0_pre4/src\r\ncmsenv\r\ngit cms-mergetopic schneiml:dqm-dqmdumpsequence\r\nscram b\r\ncmsswSequenceInfo.py --runTheMatrix\r\ncmsswSequenceInfo.py --serve\r\n```\r\n\r\n#### PR validation:\r\nThis PR should not affect any production workflows. The tool seem to work.\r\n\r\nThe unit test might be very sensitive to all sorts of configuration problems.", "branch": "master", "changed_files": 4, "comments": 4, "commits": 14, "created_at": "1583745177", "deletions": 0, "labels": ["code-checks-pending", "comparison-pending", "dqm-pending", "orp-pending", "pending-signatures", "tests-pending"], "milestone": "CMSSW_11_1_X", "number": 29150, "release-notes": [], "review_comments": 0, "state": "open", "title": "DQM: Sequence inspection tool and test", "updated_at": "1583746983", "user": "schneiml"}