{"additions": 444, "auther_ref": "adding-angle-utilities", "auther_sha": "753317574bedeba390cb91a1e5988673ad9975a6", "author": "cvuosalo", "body": "#### PR description:\r\n\r\nIn many spots in CMSSW, code like the following appears:\r\n```\r\nif (pointphi >= twopi)\r\n     pointphi -= twopi;\r\nif(pointphi < 0)\r\n     pointphi += twopi;\r\n```\r\nThe intent is to constrain the angle to the range 0<= angle < 2pi, but the code, as in this example, sometimes doesn't handle the case of an |angle| >= 4pi.\r\n\r\n`DataFormats/Math/interface/deltaPhi.h` provides a `reduceRange()` function for this purpose, but tests show this function is not as fast as it could be, and it suffers from sensitivity in its `if` statement to small deviations from pi.\r\n\r\nThis PR adds a new function `make0to2pi`, that can be significantly faster than `reduceRange()` and that greatly reduces value drift due to floating-point comparisons. This new function is added without changing the implementation of `reduceRange()` because changing `reduceRange()` could cause slight differences in program behavior. Usage of `reduceRange()` can later be replaced on a case-by-case basis where better performance and precision is required.\r\n\r\nThe `Phi` class in `DataFormats/GeometryVector/interface/Phi.h` represents an angle that maintains a value from -pi to pi. This PR enhances this class in a backwardly compatible fashion to allow the option of keeping the angle in the range from 0 to 2pi.\r\n\r\nIn addition, the generic angle utilities in the `GeantUnits.h` file are moved to `deltaPhi.h` because they are not Geant-specific and should be usable without subjecting code to Geant conventions.\r\n\r\n#### PR validation:\r\n\r\nA unit test program is included in this PR, and it verifies basic functions of the code and gives some rough performance measures.\r\n\r\nSome performance results comparing `reduceRange()` and `make0to2pi` are shown below.\r\n\r\nClang generates a warning for the Phi<> class, but this warning does not seem to be an actual problem:\r\n```\r\n>> Building LCG reflex dict from header file src/DataFormats/GeometryVector/src/classes.h\r\n  Warning: Forward declarations of templates with enums as template parameters. The responsible class is: NonTypeTemplateParmDecl 0x2b037b8 </build/cmsbld/jenkins/workspace/ib-any-integration/CMSSW_10_6_X_2019-04-19-2300/src/DataFormats/GeometryVector/interface/Phi.h:49:23, col:50> col:32 referenced 'enum Geom::PhiRange' depth 0 index 1 range\r\n `-TemplateArgument expr\r\n  `-DeclRefExpr 0x2b03770 <col:40, col:50> 'enum Geom::PhiRange' EnumConstant 0x2b01180 'MinusPiToPi' 'enum Geom::PhiRange'\r\n\r\n  Warning: Problems with arguments for forward declaration of class Phi\r\n   Warning: Forward declarations of templates with enums as template parameters. The responsible class is: NonTypeTemplateParmDecl 0x2b037b8 </build/cmsbld/jenkins/workspace/ib-any-integration/CMSSW_10_6_X_2019-04-19-2300/src/DataFormats/GeometryVector/interface/Phi.h:49:23, col:50> col:32 referenced 'enum Geom::PhiRange' depth 0 index 1 range\r\n `-TemplateArgument expr\r\n  `-DeclRefExpr 0x2b03770 <col:40, col:50> 'enum Geom::PhiRange' EnumConstant 0x2b01180 'MinusPiToPi' 'enum Geom::PhiRange'\r\n\r\n  Warning: Problems with arguments for forward declaration of class Phi\r\n```\r\nFollowing instructions from Philippe Canal, I was able to instantiate Phi variables in interactive ROOT, which Philippe said shows the class works OK, so the warning can be disregarded.\r\n\r\nNo backport is needed.", "branch": "master", "changed_files": 9, "comments": 95, "commits": 14, "created_at": "1553115839", "deletions": 102, "labels": ["code-checks-approved", "comparison-available", "compilation-warnings", "fully-signed", "geometry-approved", "orp-pending", "reconstruction-approved", "simulation-approved", "tests-approved", "upgrade-approved"], "milestone": "CMSSW_10_6_X", "number": 26227, "release-notes": [], "review_comments": 11, "state": "open", "title": "Adding angle utilities", "updated_at": "1557341930", "user": "cvuosalo"}